#summary Discuss, document and implement the Flat file container

= Introduction =

A container is a remedium class that is used for storing and retrieving data using flat files. It is necessary since the current HSQL implementation of the container is using an excessive amount of RAM.


= Desired properties =

  * Allows to set the max number of records per data file
  * Least amount possible of data files
  * Quick to retrieve data
    * Should read a record from a DB with 100 000 records under an average of 0,05 seconds after 100 random record reads
  * Quick to store data
    * Should write onto a DB 100 000 records under 10 minutes
  * Scale up to millions of records
    * Should write a DB with 100 000 000 records and manage them
  * Memory efficient
    * Overall memory usage shouldn't surpass 30Mb regardless of DB size


= Development approach =

I have recently implemented the Container Dump class that is basically dumping all records from an HSQL database onto flat files. The remarkable speed noted when importing and exporting these records are the main reason why this class is now being implemented.

Some of the code and lessons learned from the implementation of Container dump can now be applied to this new class. The desired properties section acts as a guideline of performance requirements on my development machine (Toshiba R630 laptop, i5 CPU x64 with 4Gb of RAM under Windows 7). 

A test case is being developed along case with this class implementation to ensure that each method and step of this process is tested using a repetitive approach.


= How it works =

We created an Interface class to the Container and this way it is possible to create implementation of the container using more technologies in the future other than just HSQL or Flat files.

== Constructor ==

The first step is invoking the constructor method:
{{{container = new ContainerFlatFile(id, fields, rootFolder, result);}}}

Where:
  * String *id* is the identification name of this container
  * String[] *fields* are the columns for our table 
  * File *rootFolder* is the folder where we are storing the containers 
  * LogMessage *result* is a log message object that contains details about this operation

 
=== Initial checks ===

We care to ensure that our *root folder* is valid and then we will check if we can create a sub folder with the same name as *id*.

If anything goes wrong, the *result* message will provide details and a specific value number under {{{result.getCode()}}} that you can use for debugging what has happened. 



= Progress =

30th June 2011
  * Initial implementation of new class
  * Introduced concept of log message object to allow testing the new class without tying it on a remedium component (allows testing exclusively the new class without interference from components)